spring.application.name=api-gateway
server.port=8088


spring.cloud.discovery.enabled=true

# Configuration de l'API Gateway pour le routage dynamique avec Eureka
spring.cloud.gateway.discovery.locator.enabled=true

# Timeout et gestion des erreurs
spring.cloud.gateway.httpclient.connect-timeout=5000
spring.cloud.gateway.httpclient.response-timeout=10000


# Routes (routage statique)
spring.cloud.gateway.routes[0].id=USER-PROFILE-MANAGEMENT
spring.cloud.gateway.routes[0].uri=http://localhost:8081
spring.cloud.gateway.routes[0].predicates[0]=Path=/doctors/**
spring.cloud.gateway.routes[0].filters[0]=StripPrefix=0

spring.cloud.gateway.routes[1].id=Auth-Service
spring.cloud.gateway.routes[1].uri=http://localhost:8086
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/auth/**
spring.cloud.gateway.routes[1].filters[0]=StripPrefix=0


spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/mrecords
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8080/realms/mrecords/protocol/openid-connect/certs

# Activer les logs de sécurité (optionnel)
logging.level.org.springframework.security=DEBUG
logging.level.com.corilus.user_profile_management.config=DEBUG
mvn spring-boot:run -DskipTests
spring.main.web-application-type=reactive
spring.main.allow-bean-definition-overriding=true







#spring.security.oauth2.client.registration.keycloak.client-id=your-client-id
#spring.security.oauth2.client.registration.keycloak.client-secret=your-client-secret
#spring.security.oauth2.client.provider.keycloak.token-uri=https://your-keycloak-server/auth/realms/your-realm/protocol/openid-connect/token






# Activer Eureka (si nécessaire)
eureka.client.enabled=true
eureka.client.fetch-registry=true
eureka.client.register-with-eureka=true
eureka.client.service-url.defaultZone=http://localhost:8761/eureka

# Désactiver la découverte si vous utilisez des URLs statiques
# spring.cloud.gateway.discovery.locator.enabled=false